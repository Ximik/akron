name: Build Akron GUI

permissions:
  contents: write
  
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get the tag name
        id: get_tag
        shell: bash
        run: |
          echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TAG=dev-$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          fi

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Build release binary
        run: |
          cargo build --bin akron-gui --release --target ${{ matrix.target }}

      - name: Get OS and architecture
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"linux"* ]]; then
            echo "OS=linux" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == *"darwin"* ]]; then
            echo "OS=darwin" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == *"windows"* ]]; then
            echo "OS=windows" >> $GITHUB_ENV
          fi

          if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          else
            echo "ARCH=x86_64" >> $GITHUB_ENV
          fi

      - name: Create Linux app bundle
        if: env.OS == 'linux'
        run: |
          mkdir akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}
          cp target/${{ matrix.target }}/release/akron-gui akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}
          tar -czf akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}.tar.gz akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}

      - name: Create macOS app bundle
        if: env.OS == 'darwin'
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}/Akron.app/Contents/{MacOS,Resources}
          cp target/${{ matrix.target }}/release/akron-gui akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}/Akron.app/Contents/MacOS/

          mkdir -p iconbuild.iconset
          sips -z 16 16 assets/akron.png --out iconbuild.iconset/icon_16x16.png
          sips -z 32 32 assets/akron.png --out iconbuild.iconset/icon_16x16@2x.png
          sips -z 32 32 assets/akron.png --out iconbuild.iconset/icon_32x32.png
          sips -z 64 64 assets/akron.png --out iconbuild.iconset/icon_32x32@2x.png
          iconutil -c icns iconbuild.iconset -o icon.icns
          cp icon.icns akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}/Akron.app/Contents/Resources/
          
          cat > akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}/Akron.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleExecutable</key>
            <string>akron-gui</string>
            <key>CFBundleIconFile</key>
            <string>icon</string>
            <key>CFBundleIdentifier</key>
            <string>com.impervious.akron</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>Akron</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ env.TAG }}</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13</string>
            <key>NSHighResolutionCapable</key>
            <true/>
          </dict>
          </plist>
          EOF

          chmod +x akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}/Akron.app/Contents/MacOS/akron-gui
          codesign --force --options runtime --sign "$APPLE_SIGNING_IDENTITY" --deep --timestamp akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}/Akron.app
          codesign --verify --verbose akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}/Akron.app
          ditto -c -k --keepParent akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }} akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}.zip 

      - name: Create Windows bundle
        if: env.OS == 'windows'
        shell: powershell
        run: |
          choco install imagemagick.app -y
          choco install reshack -y
          magick convert assets/akron.png -define icon:auto-resize=16,32,48,64 akron.ico

          $outputDir = "akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}"
          $sourceExe = "target\${{ matrix.target }}\release\akron-gui.exe"
          $targetExe = "$outputDir\akron.exe"

          $reshackCmd = """C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe"" -open ""$sourceExe"" -save ""$targetExe"" -action addoverwrite -res ""akron.ico"" -mask ICONGROUP,MAINICON,"
          Write-Host "$reshackCmd"
          cmd /c $reshackCmd

          $zipFile = "akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}.zip"
          7z a -tzip $zipFile $outputDir

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }} 
          name: Release ${{ env.TAG }}
          body: |
            Akron release of version ${{ env.TAG }}.
          draft: false
          prerelease: false
          files: |
            akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}.${{ env.OS == 'linux' && 'tar.gz' || 'zip' }}
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}