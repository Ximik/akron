name: Build Akron GUI

permissions:
  contents: write
  
on:
  push:
    tags:
      - '*.*.*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          # - os: macos-13
          #   target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version and validate
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep -E '^version = ' Cargo.toml | head -1 | sed 's/version = "//g' | sed 's/"//g')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG_VERSION=${GITHUB_REF##*/}

            if [[ "$VERSION" != "$TAG_VERSION" ]]; then
              echo "ERROR: Version mismatch!"
              echo "Cargo.toml version: $VERSION"
              echo "Git tag version: $TAG_VERSION"
              exit 1
            fi
          fi

      - name: Get OS and architecture
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"linux"* ]]; then
            echo "OS=linux" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == *"darwin"* ]]; then
            echo "OS=darwin" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == *"windows"* ]]; then
            echo "OS=windows" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          else
            echo "ARCH=amd64" >> $GITHUB_ENV
          fi

      - name: Set bundle name
        shell: bash
        run: |
          echo "BUNDLE_NAME=akron-${{ env.VERSION }}-${{ env.OS }}-${{ env.ARCH }}" >> $GITHUB_ENV

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get install -y musl-tools musl-dev
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            wget https://github.com/musl-cross/musl-cross/releases/download/20240903/aarch64-unknown-linux-musl.tgz
            tar -xzf aarch64-unknown-linux-musl.tgz
            echo "$PWD/aarch64-unknown-linux-musl/bin" >> $GITHUB_PATH
          fi

      - name: Build release binary
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-unknown-linux-musl-gcc
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc
          CC_aarch64_unknown_linux_musl: aarch64-unknown-linux-musl-gcc
          AR_aarch64_unknown_linux_musl: aarch64-unknown-linux-musl-ar
          CC_aarch64-unknown-linux-musl: aarch64-unknown-linux-musl-gcc
          AR_aarch64-unknown-linux-musl: aarch64-unknown-linux-musl-ar
        run: |
          cargo build --bin akron-gui --release --target ${{ matrix.target }}

      - name: Create Linux bundle and packages
        if: env.OS == 'linux'
        run: |
          # Linux bundle
          mkdir -p ${{ env.BUNDLE_NAME }}/bin
          mkdir -p ${{ env.BUNDLE_NAME }}/share/applications
          mkdir -p ${{ env.BUNDLE_NAME }}/share/icons/hicolor/64x64/apps

          cp target/${{ matrix.target }}/release/akron-gui ${{ env.BUNDLE_NAME }}/bin/akron
          cp .github/akron.desktop ${{ env.BUNDLE_NAME }}/share/applications/
          cp -r assets/hicolor/* ${{ env.BUNDLE_NAME }}/share/icons/hicolor/

          tar -czf ${{ env.BUNDLE_NAME }}.tar.gz ${{ env.BUNDLE_NAME }}

          # deb package
          mkdir -p packaging/deb/usr
          cp -r ${{ env.BUNDLE_NAME }}/* packaging/deb/usr/

          mkdir -p packaging/deb/DEBIAN
          envsubst < .github/control.template > packaging/deb/DEBIAN/control
          cp .github/postinst packaging/deb/DEBIAN/postinst
          chmod 755 packaging/deb/DEBIAN/postinst
          cp .github/postrm packaging/deb/DEBIAN/postrm
          chmod 755 packaging/deb/DEBIAN/postrm
          dpkg-deb --build packaging/deb ${{ env.BUNDLE_NAME }}.deb

          # rpm package
          sudo apt-get install -y alien
          sudo alien --to-rpm --scripts ${{ env.BUNDLE_NAME }}.deb
          mv *.rpm ${{ env.BUNDLE_NAME }}.rpm

      - name: Install create-dmg
        if: env.OS == 'darwin'
        run: |
          brew install create-dmg

      - name: Create macOS app bundle
        if: env.OS == 'darwin'
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ${{ env.BUNDLE_NAME }}/Akron.app/Contents/{MacOS,Resources}
          cp target/${{ matrix.target }}/release/akron-gui ${{ env.BUNDLE_NAME }}/Akron.app/Contents/MacOS/

          mkdir -p iconbuild.iconset
          cp assets/hicolor/16x16/apps/akron.png iconbuild.iconset/icon_16x16.png
          cp assets/hicolor/32x32/apps/akron.png iconbuild.iconset/icon_16x16@2x.png
          cp assets/hicolor/32x32/apps/akron.png iconbuild.iconset/icon_32x32.png
          cp assets/hicolor/64x64/apps/akron.png iconbuild.iconset/icon_32x32@2x.png
          cp assets/hicolor/128x128/apps/akron.png iconbuild.iconset/icon_128x128.png
          cp assets/hicolor/256x256/apps/akron.png iconbuild.iconset/icon_128x128@2x.png
          cp assets/hicolor/256x256/apps/akron.png iconbuild.iconset/icon_256x256.png
          cp assets/hicolor/512x512/apps/akron.png iconbuild.iconset/icon_256x256@2x.png
          cp assets/hicolor/512x512/apps/akron.png iconbuild.iconset/icon_512x512.png
          iconutil -c icns iconbuild.iconset -o icon.icns
          cp icon.icns ${{ env.BUNDLE_NAME }}/Akron.app/Contents/Resources/
          
          envsubst < .github/Info.plist.template > ${{ env.BUNDLE_NAME }}/Akron.app/Contents/Info.plist

          chmod +x ${{ env.BUNDLE_NAME }}/Akron.app/Contents/MacOS/akron-gui
          codesign --force --options runtime --sign "$APPLE_SIGNING_IDENTITY" --deep --timestamp ${{ env.BUNDLE_NAME }}/Akron.app
          codesign --verify --verbose ${{ env.BUNDLE_NAME }}/Akron.app
          
          # Create dmg
          echo "Creating DMG installer ..."
          create-dmg \
            --volname "Akron" \
            --window-pos 200 120 \
            --window-size 600 330 \
            --icon-size 100 \
            --icon "Akron.app" 170 125 \
            --app-drop-link 410 120 \
            --hide-extension "Akron.app" \
            --codesign "$APPLE_SIGNING_IDENTITY" \
            --hdiutil-quiet \
            "${{ env.BUNDLE_NAME }}.dmg" \
            "${{ env.BUNDLE_NAME }}/Akron.app"

          # Submit for notarization
          echo "Submitting app for notarization..."
          xcrun notarytool submit ${{ env.BUNDLE_NAME }}.dmg \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APP_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait
          
          # Staple the notarization ticket to the DMG
          echo "Stapling notarization ticket to DMG..."
          xcrun stapler staple ${{ env.BUNDLE_NAME }}.dmg

          # Verify the stapled DMG
          echo "Verifying stapled DMG..."
          xcrun stapler validate ${{ env.BUNDLE_NAME }}.dmg

      - name: Create Windows bundle and installer
        if: env.OS == 'windows'
        shell: powershell
        run: |
          choco install imagemagick.app -y
          choco install reshack -y
          magick @(16,24,32,48,64,96,128,256,512 | ForEach-Object {"assets/hicolor/${_}x${_}/apps/akron.png"}) akron.ico

          $bundleName = "${{ env.BUNDLE_NAME }}"
          $sourceExe = "target\${{ matrix.target }}\release\akron-gui.exe"
          $targetExe = "$bundleName\akron.exe"

          New-Item -ItemType Directory -Force -Path $bundleName
          $reshackCmd = """C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe"" -open ""$sourceExe"" -save ""$targetExe"" -action addoverwrite -res ""akron.ico"" -mask ICONGROUP,MAINICON,"
          Write-Host "$reshackCmd"
          cmd /c $reshackCmd

          $zipFile = "$bundleName.zip"
          7z a -tzip $zipFile $bundleName

          $env:BUNDLE_NAME = $bundleName
          $env:VERSION = "${{ env.VERSION }}.0"
          (Get-Content ".github\akron.wxs.template") -replace '\$VERSION', $env:VERSION -replace '\$BUNDLE_NAME', $env:BUNDLE_NAME | Out-File -FilePath "akron.wxs" -Encoding UTF8
          
          & "C:\Program Files (x86)\WiX Toolset v3.14\bin\candle.exe" akron.wxs
          & "C:\Program Files (x86)\WiX Toolset v3.14\bin\light.exe" -ext WixUIExtension akron.wixobj -o "$bundleName.msi"
          Remove-Item -Path "$bundleName.wixpdb" -ErrorAction SilentlyContinue

      - name: Find release artifacts
        id: find_artifacts
        shell: bash
        run: |
          artifacts=$(find . -maxdepth 1 -name "${{ env.BUNDLE_NAME }}.*" -type f | sort)

          echo "Found artifacts:"
          echo "$artifacts"
          
          artifact_list=""
          for artifact in $artifacts; do
            if [ -n "$artifact_list" ]; then
              artifact_list="$artifact_list\n$artifact"
            else
              artifact_list="$artifact"
            fi
          done
          
          echo "artifacts<<EOF" >> $GITHUB_OUTPUT
          echo -e "$artifact_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.event_name == 'workflow_dispatch' && 'Development Build' || 'Release' }} ${{ env.VERSION }}
          body: |
            Akron release of version ${{ env.VERSION }}.
          draft: ${{ github.event_name == 'workflow_dispatch' }}
          prerelease: false
          files: ${{ steps.find_artifacts.outputs.artifacts }}
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
