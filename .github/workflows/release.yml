name: Build Akron GUI

permissions:
  contents: write
  
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-13
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get the tag name
        id: get_tag
        shell: bash
        run: |
          echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TAG=dev-$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          fi

      - name: Get OS and architecture
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"linux"* ]]; then
            echo "OS=linux" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == *"darwin"* ]]; then
            echo "OS=darwin" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == *"windows"* ]]; then
            echo "OS=windows" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
            echo "ARCH=arm64" >> $GITHUB_ENV
          else
            echo "ARCH=x86_64" >> $GITHUB_ENV
          fi

      - name: Set bundle name
        shell: bash
        run: |
          echo "BUNDLE_NAME=akron-${{ env.TAG }}-${{ env.OS }}-${{ env.ARCH }}" >> $GITHUB_ENV

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Build release binary
        run: |
          cargo build --bin akron-gui --release --target ${{ matrix.target }}

      - name: Create Linux app bundle
        if: env.OS == 'linux'
        run: |
          mkdir ${{ env.BUNDLE_NAME }}
          cp target/${{ matrix.target }}/release/akron-gui ${{ env.BUNDLE_NAME }}
          tar -czf ${{ env.BUNDLE_NAME }}.tar.gz ${{ env.BUNDLE_NAME }}

      - name: Create macOS app bundle
        if: env.OS == 'darwin'
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ${{ env.BUNDLE_NAME }}/Akron.app/Contents/{MacOS,Resources}
          cp target/${{ matrix.target }}/release/akron-gui ${{ env.BUNDLE_NAME }}/Akron.app/Contents/MacOS/

          mkdir -p iconbuild.iconset
          sips -z 16 16 assets/akron.png --out iconbuild.iconset/icon_16x16.png
          sips -z 32 32 assets/akron.png --out iconbuild.iconset/icon_16x16@2x.png
          sips -z 32 32 assets/akron.png --out iconbuild.iconset/icon_32x32.png
          sips -z 64 64 assets/akron.png --out iconbuild.iconset/icon_32x32@2x.png
          iconutil -c icns iconbuild.iconset -o icon.icns
          cp icon.icns ${{ env.BUNDLE_NAME }}/Akron.app/Contents/Resources/
          
          envsubst < .github/Info.plist.template > ${{ env.BUNDLE_NAME }}/Akron.app/Contents/Info.plist

          chmod +x ${{ env.BUNDLE_NAME }}/Akron.app/Contents/MacOS/akron-gui
          codesign --force --options runtime --sign "$APPLE_SIGNING_IDENTITY" --deep --timestamp ${{ env.BUNDLE_NAME }}/Akron.app
          codesign --verify --verbose ${{ env.BUNDLE_NAME }}/Akron.app
          ditto -c -k --keepParent ${{ env.BUNDLE_NAME }} ${{ env.BUNDLE_NAME }}.zip 

      - name: Create Windows bundle
        if: env.OS == 'windows'
        shell: powershell
        run: |
          choco install imagemagick.app -y
          choco install reshack -y
          magick assets/akron.png -define icon:auto-resize=16,32,48,64 akron.ico

          $bundleName = "${{ env.BUNDLE_NAME }}"
          $sourceExe = "target\${{ matrix.target }}\release\akron-gui.exe"
          $targetExe = "$bundleName\akron.exe"

          New-Item -ItemType Directory -Force -Path $bundleName
          $reshackCmd = """C:\Program Files (x86)\Resource Hacker\ResourceHacker.exe"" -open ""$sourceExe"" -save ""$targetExe"" -action addoverwrite -res ""akron.ico"" -mask ICONGROUP,MAINICON,"
          Write-Host "$reshackCmd"
          cmd /c $reshackCmd

          $zipFile = "$bundleName.zip"
          7z a -tzip $zipFile $bundleName

          $env:BUNDLE_NAME = $bundleName
          $env:VERSION = if ($env:TAG -match "^v?(\d+)\.(\d+)\.(\d+)") {
            "$($matches[1]).$($matches[2]).$($matches[3]).0"
          } else {
            "0.0.0.1"
          }
          (Get-Content ".github\akron.wxs.template") -replace '\$VERSION', $env:VERSION -replace '\$BUNDLE_NAME', $env:BUNDLE_NAME | Out-File -FilePath "akron.wxs" -Encoding UTF8
          
          & "C:\Program Files (x86)\WiX Toolset v3.14\bin\candle.exe" akron.wxs
          & "C:\Program Files (x86)\WiX Toolset v3.14\bin\light.exe" -ext WixUIExtension akron.wixobj -o "$bundleName.msi"
          Remove-Item -Path "$bundleName.wixpdb" -ErrorAction SilentlyContinue

      - name: Find release artifacts
        id: find_artifacts
        shell: bash
        run: |
          artifacts=$(find . -maxdepth 1 -name "${{ env.BUNDLE_NAME }}.*" -type f | sort)
          echo "Found artifacts:"
          echo "$artifacts"
          
          artifact_list=""
          for artifact in $artifacts; do
            if [ -n "$artifact_list" ]; then
              artifact_list="$artifact_list\n$artifact"
            else
              artifact_list="$artifact"
            fi
          done
          
          echo "artifacts<<EOF" >> $GITHUB_OUTPUT
          echo -e "$artifact_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }} 
          name: Release ${{ env.TAG }}
          body: |
            Akron release of version ${{ env.TAG }}.
          draft: false
          prerelease: false
          files: ${{ steps.find_artifacts.outputs.artifacts }}
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}